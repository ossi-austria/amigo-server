plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'org.asciidoctor.jvm.convert' version "2.4.0"
}

dependencies {
    implementation project(path: ':platform-domain', configuration: 'default')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion"

    implementation "org.projectlombok:lombok"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.10"

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Rest and HATEOAS
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Security
    implementation "org.springframework.boot:spring-boot-starter-security"
    // spring data, JPA, Repositories and DB migration
    implementation 'org.springframework.data:spring-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "org.flywaydb:flyway-core"
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'com.h2database:h2'

    //Email
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    implementation "com.google.firebase:firebase-admin:$firebaseAdminVersion"

    // actuator, prometheus, logging
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "io.micrometer:micrometer-registry-prometheus"

    testImplementation "org.junit.jupiter:junit-jupiter:$jupiterVersion"
    // DO NOT USE:   testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
    // DO NOT USE:   testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'mockito', module: 'mockito-core' //by both name and group
    }
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc"
    testImplementation "io.mockk:mockk:${mockkVersion}"
    testImplementation "com.ninja-squad:springmockk:$springmockkVersion"
    testImplementation "io.zonky.test:embedded-database-spring-test:$zonkPostegresTestVersion"
    // testcontainers
    testImplementation "org.testcontainers:testcontainers:$testcontainersVersion"
    testImplementation "org.testcontainers:postgresql:$testcontainersVersion"

    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"

}

noArg {
    annotation("org.ossiaustria.platform.api.Dto")
    annotation("org.ossiaustria.platform.api.DtoRequest")
}

ext {
    set('snippetsDir', file('build/generated-snippets'))
    set('spring-restdocs.version', '2.0.4.RELEASE')
}

test {
    outputs.dir snippetsDir
}

asciidoctor {
    attributes 'snippets': snippetsDir
    inputs.dir snippetsDir
    dependsOn test
    configurations 'asciidoctorExt'
}

bootJar {
    enabled = true
    mainClassName = 'org.ossiaustria.amigo.platform.RestApplicationKt'
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

jar {
    enabled = false
}

configurations {
    asciidoctorExt
}
dependencies {
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
}