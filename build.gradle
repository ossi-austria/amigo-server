buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31"
        classpath("org.jetbrains.kotlin:kotlin-noarg:1.5.31")
        classpath("org.jetbrains.kotlin:kotlin-allopen:1.5.31")
  }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

subprojects {

    group = 'org.ossiaustria.amigo'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java-library'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'kotlin-spring'
    apply plugin: 'kotlin-jpa'
    apply plugin: 'kotlin-allopen'
    apply plugin: 'jacoco'

    ext['junit-jupiter.version'] = '5.8.1'

    ext {
        kotlinxCoroutinesVersion = "1.5.2-native-mt"
        jupiterVersion = "5.8.1"
        firebaseAdminVersion = "7.3.0"
        mockkVersion = "1.12.0"
        springmockkVersion = "3.0.1"
        testcontainersVersion = "1.16.0"
        hamcrestVersion = "1.3"
        zonkPostegresTestVersion = "2.1.0"
    }
    repositories {
//        jcenter()
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:2.5.5.RELEASE") {
                bomProperty("kotlin.version", "1.5.31")
            }
        }
    }

    compileKotlin { kotlinOptions { jvmTarget = "1.8" } }
    compileTestKotlin { kotlinOptions { jvmTarget = "1.8" } }

    test {
        systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
        useJUnitPlatform()
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    tasks.withType(Test) {
        testLogging {
            exceptionFormat = 'full'
        }
        systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
        afterTest { descriptor, result ->
            println "$descriptor.classDisplayName > $descriptor.displayName: $result.resultType"
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled true
        }
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
    }

    task coverageReport() {
        dependsOn jacocoTestReport

        def reportFile = project.file("build/reports/jacoco/test/jacocoTestReport.xml")
        inputs.file(reportFile)

        doLast {
            def slurper = new XmlSlurper()
            slurper.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
            slurper.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
            def xml = slurper.parse(reportFile)
            def counter = xml.counter.find {
                node -> node.@type == 'BRANCH'
            }
            def missed = counter.@missed.toDouble()
            def covered = counter.@covered.toDouble()
            def total = missed + covered
            def percentage = covered / total * 100

            printf "Coverage: Missed %.0f branches%n", missed
            printf "Covered %.0f branches%n", covered
            printf "Total %.0f%%%n", percentage
            printf "Coverage: Total %.0f%%%n", percentage
        }
    }
}


